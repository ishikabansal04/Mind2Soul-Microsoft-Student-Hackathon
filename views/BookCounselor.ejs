<!DOCTYPE html>
<html>
<head>
	<title>Mind2Soul</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/css/animate.css">
	<link rel="stylesheet" type="text/css" href="/css/style.css">
  <style>
    .wow:first-child {
      visibility: hidden;
    }
  </style>
  
</head>
<body>
 
 <!-- Start Header  -->
 <header>
 	 <div class="container">
 	 	<div class="logo">
 	 		 <a href=""><span>Mind</span>2Soul</a>
 	 	</div>
 	 	<a href="javascript:void(0)" class="ham-burger">
 	       <span></span>	
 	       <span></span>
 	 	</a>
 	 	<div class="nav">
 	 		<ul>
                <li><a href="/">Home</a></li>
                <li><a href="/">About</a></li>
                <li><a href="/">Services</a></li>
                <li><a href="/">Features</a></li>
                <li><a href="/">Training</a></li>
                <li><a href="/">Packages</a></li>
                <li><a href="/">Contact</a></li>
 	 		</ul>
 	 	</div>
 	 </div>
 </header>

 <div class="form_wrapper">
    <div class="form_container">
      <div class="title_container">
        <h2>Book Your Counselor</h2>
      </div>
      <div class="row clearfix">
        <div class="">
          <form action="/BookCounselor" method="post">
            <div class="input_field"> <span><i aria-hidden="true" class="fa fa-user"></i></span>
                <input type="text" name="fullname" placeholder="Full Name" required />
              </div>
            <div class="input_field"> <span><i aria-hidden="true" class="fa fa-envelope"></i></span>
              <input type="email" name="email" placeholder="Email" required />
            </div>
            <div class="input_field"> <span><i aria-hidden="true" class="fa fa-phone"></i></span>
                <input type="number" name="contact" placeholder="Contact Number" required />
            </div>
            <div class="input_field radio_option">
                <input type="radio" name="radiogroup1" id="rd1">
                <label for="rd1">Male</label>
                <input type="radio" name="radiogroup1" id="rd2">
                <label for="rd2">Female</label>
                <input type="radio" name="radiogroup1" id="rd3">
                <label for="rd3">Other</label>
                <input type="radio" name="radiogroup1" id="rd4">
                <label for="rd4">Prefer Not to Say</label>
            </div>
            <div class="input_field radio_option" >
                <h4>Select Your Slot</h4>
                <% availableslot.forEach(function(element){ %>
                    <div class = "card">
                        <input type="radio" name="radiogroup2" class = "book-counseler" id="<%= element._id%>" value= "<%=element._id%>">
                        <label for="<%= element._id%>">Book this Counselor for me.</label>     
                        <!-- <p class = "time"><span class = "headings">Time: </span> </p>
                        <p class = "day"><span class = "headings">Day: </span> </p>
                        <p class = "information"><span class = "headings">Counselor Information:</span></p>  -->
                        <table>
                            <tbody>
                                <tr>
                                    <th>Slot Time: </th>
                                    <td data-column="First Name"><%= element.Time%></td>
                                </tr>
                                <tr>
                                    <th>Slot Day: </th>
                                    <td data-column="First Name"><%= element.Day%></td>
                              </tr>
                              <tr>
                                <th>Counselor Name: </th>
                                <td data-column="First Name"><%= element.CounselorInformation.Name%></td>
                              </tr>
                              <tr>
                                <th>Counselor Age: </th>
                                <td data-column="First Name"><%= element.CounselorInformation.Age%></td>
                              </tr>
                              <tr>
                                <th>Counselor Email: </th>
                                <td data-column="First Name"><%= element.CounselorInformation.Email%></td>
                              </tr>
                              <tr>
                                <th>Counselor Gender: </th>
                                <td data-column="First Name"><%= element.CounselorInformation.Gender%></td>
                              </tr>
                              <tr>
                                <th>Counselor's Experience: </th>
                                <td data-column="First Name"><%= element.CounselorInformation.Experience%></td>
                              </tr>
                              <tr>
                                <th>Professional Position: </th>
                                <td data-column="First Name"><%= element.CounselorInformation.Position%></td>
                              </tr>
                              <tr>
                                <th>Rating: </th>
                                <td data-column="First Name"><%= element.CounselorInformation.Rating%> <i class = "fa fa-star"></i></td>
                              </tr>
                            </tbody>
                          </table> 
                             
                    </div>
                    
                <% }); %>
            </div>
              
            <input class="button" type="submit" value="Book Now" />
          </form>
        </div>
      </div>
    </div>
  </div>
 
 <!-- Start Contact -->
 <section class="contact" id="contact">
    <div class="container">
       <div class="content">
           <div class="box form wow slideInLeft">
            <form action = "https://docs.google.com/forms/u/0/d/e/1FAIpQLSeRZQ-nKD1oEBU5GKkufJWPmB3Zx7sJA5L4LfHz8Zdy9nbPdA/formResponse" method="POST">
                <input type="text" name = "entry.881156026" required placeholder="Enter Name">
                <input type="text" name = "entry.971624021" required placeholder="Enter Email">
                <input type="text" name = "entry.1937598368" required placeholder="Enter Mobile">
                <textarea name = "entry.1170109943" required placeholder="Enter Message"></textarea>
                <input type="submit" value="Send Message"/>
             </form>
           </div>
           <div class="box text wow slideInRight">
                <h2>Get Connected with Mind2Soul</h2>
                 <p class="title-p">We wish to ensure a perfect body, mind and soul for each one of you!</p>
                 <div class="info">
                     <ul>
                         <li><span class="fa fa-map-marker"></span> Delhi, India</li>
                         <li><span class="fa fa-envelope"></span> mind2soulinfo@gmail.com</li>
                     </ul>
                 </div>
                 <div class="social">
                      <a href=""><span class="fa fa-facebook"></span></a>
                      <a href=""><span class="fa fa-linkedin"></span></a>
                      <a href=""><span class="fa fa-skype"></span></a>
                      <a href=""><span class="fa fa-youtube-play"></span></a>
                 </div>

                 <div class="copy">
                     &copy; Student Hackathon Team
                 </div>
           </div>
       </div>
    </div>
 </section>
<!-- End Contact -->



<!-- jquery -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<script>
   // Get the modal
   var modal = document.getElementById('id01');
   var modal2 = document.getElementById('id02');
   var modal3 = document.getElementById('id03');

   // When the user clicks anywhere outside of the modal, close it
   window.onclick = function(event) {
       if (event.target == modal) {
           modal.style.display = "none";
       }
   }
   window.onclick = function(event) {
       if (event.target == modal2) {
           modal2.style.display = "none";
       }
   }
   window.onclick = function(event) {
       if (event.target == modal3) {
           modal3.style.display = "none";
       }
   }
   </script>
<script>
   $(document).ready(function(){

     $(".ham-burger, .nav ul li a").click(function(){
      
       $(".nav").toggleClass("open")

       $(".ham-burger").toggleClass("active");
     })      
     $(".accordian-container").click(function(){
         $(".accordian-container").children(".body").slideUp();
         $(".accordian-container").removeClass("active")
         $(".accordian-container").children(".head").children("span").removeClass("fa-angle-down").addClass("fa-angle-up")
         $(this).children(".body").slideDown();
         $(this).addClass("active")
         $(this).children(".head").children("span").removeClass("fa-angle-up").addClass("fa-angle-down")
     })

      $(".nav ul li a, .go-down").click(function(event){
        if(this.hash !== ""){

             event.preventDefault();

             var hash=this.hash; 

             $('html,body').animate({
               scrollTop:$(hash).offset().top
             },800 , function(){
                window.location.hash=hash;
             });

             // add active class in navigation
             $(".nav ul li a").removeClass("active")
             $(this).addClass("active")
        }
     })
})

</script>
<script>
   !function(a, b) {
   if ("function" == typeof define && define.amd) define([ "module", "exports" ], b); else if ("undefined" != typeof exports) b(module, exports); else {
       var c = {
           exports: {}
       };
       b(c, c.exports), a.WOW = c.exports;
   }
}(this, function(a, b) {
   "use strict";
   function c(a, b) {
       if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
   }
   function d(a, b) {
       return b.indexOf(a) >= 0;
   }
   function e(a, b) {
       for (var c in b) if (null == a[c]) {
           var d = b[c];
           a[c] = d;
       }
       return a;
   }
   function f(a) {
       return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(a);
   }
   function g(a) {
       var b = arguments.length <= 1 || void 0 === arguments[1] ? !1 : arguments[1], c = arguments.length <= 2 || void 0 === arguments[2] ? !1 : arguments[2], d = arguments.length <= 3 || void 0 === arguments[3] ? null : arguments[3], e = void 0;
       return null != document.createEvent ? (e = document.createEvent("CustomEvent"), 
       e.initCustomEvent(a, b, c, d)) : null != document.createEventObject ? (e = document.createEventObject(), 
       e.eventType = a) : e.eventName = a, e;
   }
   function h(a, b) {
       null != a.dispatchEvent ? a.dispatchEvent(b) : b in (null != a) ? a[b]() : "on" + b in (null != a) && a["on" + b]();
   }
   function i(a, b, c) {
       null != a.addEventListener ? a.addEventListener(b, c, !1) : null != a.attachEvent ? a.attachEvent("on" + b, c) : a[b] = c;
   }
   function j(a, b, c) {
       null != a.removeEventListener ? a.removeEventListener(b, c, !1) : null != a.detachEvent ? a.detachEvent("on" + b, c) : delete a[b];
   }
   function k() {
       return "innerHeight" in window ? window.innerHeight : document.documentElement.clientHeight;
   }
   Object.defineProperty(b, "__esModule", {
       value: !0
   });
   var l, m, n = function() {
       function a(a, b) {
           for (var c = 0; c < b.length; c++) {
               var d = b[c];
               d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
               Object.defineProperty(a, d.key, d);
           }
       }
       return function(b, c, d) {
           return c && a(b.prototype, c), d && a(b, d), b;
       };
   }(), o = window.WeakMap || window.MozWeakMap || function() {
       function a() {
           c(this, a), this.keys = [], this.values = [];
       }
       return n(a, [ {
           key: "get",
           value: function(a) {
               for (var b = 0; b < this.keys.length; b++) {
                   var c = this.keys[b];
                   if (c === a) return this.values[b];
               }
           }
       }, {
           key: "set",
           value: function(a, b) {
               for (var c = 0; c < this.keys.length; c++) {
                   var d = this.keys[c];
                   if (d === a) return this.values[c] = b, this;
               }
               return this.keys.push(a), this.values.push(b), this;
           }
       } ]), a;
   }(), p = window.MutationObserver || window.WebkitMutationObserver || window.MozMutationObserver || (m = l = function() {
       function a() {
           c(this, a), "undefined" != typeof console && null !== console && (console.warn("MutationObserver is not supported by your browser."), 
           console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content."));
       }
       return n(a, [ {
           key: "observe",
           value: function() {}
       } ]), a;
   }(), l.notSupported = !0, m), q = window.getComputedStyle || function(a) {
       var b = /(\-([a-z]){1})/g;
       return {
           getPropertyValue: function(c) {
               "float" === c && (c = "styleFloat"), b.test(c) && c.replace(b, function(a, b) {
                   return b.toUpperCase();
               });
               var d = a.currentStyle;
               return (null != d ? d[c] : void 0) || null;
           }
       };
   }, r = function() {
       function a() {
           var b = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];
           c(this, a), this.defaults = {
               boxClass: "wow",
               animateClass: "animated",
               offset: 0,
               mobile: !0,
               live: !0,
               callback: null,
               scrollContainer: null,
               resetAnimation: !0
           }, this.animate = function() {
               return "requestAnimationFrame" in window ? function(a) {
                   return window.requestAnimationFrame(a);
               } : function(a) {
                   return a();
               };
           }(), this.vendors = [ "moz", "webkit" ], this.start = this.start.bind(this), this.resetAnimation = this.resetAnimation.bind(this), 
           this.scrollHandler = this.scrollHandler.bind(this), this.scrollCallback = this.scrollCallback.bind(this), 
           this.scrolled = !0, this.config = e(b, this.defaults), null != b.scrollContainer && (this.config.scrollContainer = document.querySelector(b.scrollContainer)), 
           this.animationNameCache = new o(), this.wowEvent = g(this.config.boxClass);
       }
       return n(a, [ {
           key: "init",
           value: function() {
               this.element = window.document.documentElement, d(document.readyState, [ "interactive", "complete" ]) ? this.start() : i(document, "DOMContentLoaded", this.start), 
               this.finished = [];
           }
       }, {
           key: "start",
           value: function() {
               var a = this;
               if (this.stopped = !1, this.boxes = [].slice.call(this.element.querySelectorAll("." + this.config.boxClass)), 
               this.all = this.boxes.slice(0), this.boxes.length) if (this.disabled()) this.resetStyle(); else for (var b = 0; b < this.boxes.length; b++) {
                   var c = this.boxes[b];
                   this.applyStyle(c, !0);
               }
               if (this.disabled() || (i(this.config.scrollContainer || window, "scroll", this.scrollHandler), 
               i(window, "resize", this.scrollHandler), this.interval = setInterval(this.scrollCallback, 50)), 
               this.config.live) {
                   var d = new p(function(b) {
                       for (var c = 0; c < b.length; c++) for (var d = b[c], e = 0; e < d.addedNodes.length; e++) {
                           var f = d.addedNodes[e];
                           a.doSync(f);
                       }
                   });
                   d.observe(document.body, {
                       childList: !0,
                       subtree: !0
                   });
               }
           }
       }, {
           key: "stop",
           value: function() {
               this.stopped = !0, j(this.config.scrollContainer || window, "scroll", this.scrollHandler), 
               j(window, "resize", this.scrollHandler), null != this.interval && clearInterval(this.interval);
           }
       }, {
           key: "sync",
           value: function() {
               p.notSupported && this.doSync(this.element);
           }
       }, {
           key: "doSync",
           value: function(a) {
               if ("undefined" != typeof a && null !== a || (a = this.element), 1 === a.nodeType) {
                   a = a.parentNode || a;
                   for (var b = a.querySelectorAll("." + this.config.boxClass), c = 0; c < b.length; c++) {
                       var e = b[c];
                       d(e, this.all) || (this.boxes.push(e), this.all.push(e), this.stopped || this.disabled() ? this.resetStyle() : this.applyStyle(e, !0), 
                       this.scrolled = !0);
                   }
               }
           }
       }, {
           key: "show",
           value: function(a) {
               return this.applyStyle(a), a.className = a.className + " " + this.config.animateClass, 
               null != this.config.callback && this.config.callback(a), h(a, this.wowEvent), this.config.resetAnimation && (i(a, "animationend", this.resetAnimation), 
               i(a, "oanimationend", this.resetAnimation), i(a, "webkitAnimationEnd", this.resetAnimation), 
               i(a, "MSAnimationEnd", this.resetAnimation)), a;
           }
       }, {
           key: "applyStyle",
           value: function(a, b) {
               var c = this, d = a.getAttribute("data-wow-duration"), e = a.getAttribute("data-wow-delay"), f = a.getAttribute("data-wow-iteration");
               return this.animate(function() {
                   return c.customStyle(a, b, d, e, f);
               });
           }
       }, {
           key: "resetStyle",
           value: function() {
               for (var a = 0; a < this.boxes.length; a++) {
                   var b = this.boxes[a];
                   b.style.visibility = "visible";
               }
           }
       }, {
           key: "resetAnimation",
           value: function(a) {
               if (a.type.toLowerCase().indexOf("animationend") >= 0) {
                   var b = a.target || a.srcElement;
                   b.className = b.className.replace(this.config.animateClass, "").trim();
               }
           }
       }, {
           key: "customStyle",
           value: function(a, b, c, d, e) {
               return b && this.cacheAnimationName(a), a.style.visibility = b ? "hidden" : "visible", 
               c && this.vendorSet(a.style, {
                   animationDuration: c
               }), d && this.vendorSet(a.style, {
                   animationDelay: d
               }), e && this.vendorSet(a.style, {
                   animationIterationCount: e
               }), this.vendorSet(a.style, {
                   animationName: b ? "none" : this.cachedAnimationName(a)
               }), a;
           }
       }, {
           key: "vendorSet",
           value: function(a, b) {
               for (var c in b) if (b.hasOwnProperty(c)) {
                   var d = b[c];
                   a["" + c] = d;
                   for (var e = 0; e < this.vendors.length; e++) {
                       var f = this.vendors[e];
                       a["" + f + c.charAt(0).toUpperCase() + c.substr(1)] = d;
                   }
               }
           }
       }, {
           key: "vendorCSS",
           value: function(a, b) {
               for (var c = q(a), d = c.getPropertyCSSValue(b), e = 0; e < this.vendors.length; e++) {
                   var f = this.vendors[e];
                   d = d || c.getPropertyCSSValue("-" + f + "-" + b);
               }
               return d;
           }
       }, {
           key: "animationName",
           value: function(a) {
               var b = void 0;
               try {
                   b = this.vendorCSS(a, "animation-name").cssText;
               } catch (c) {
                   b = q(a).getPropertyValue("animation-name");
               }
               return "none" === b ? "" : b;
           }
       }, {
           key: "cacheAnimationName",
           value: function(a) {
               return this.animationNameCache.set(a, this.animationName(a));
           }
       }, {
           key: "cachedAnimationName",
           value: function(a) {
               return this.animationNameCache.get(a);
           }
       }, {
           key: "scrollHandler",
           value: function() {
               this.scrolled = !0;
           }
       }, {
           key: "scrollCallback",
           value: function() {
               if (this.scrolled) {
                   this.scrolled = !1;
                   for (var a = [], b = 0; b < this.boxes.length; b++) {
                       var c = this.boxes[b];
                       if (c) {
                           if (this.isVisible(c)) {
                               this.show(c);
                               continue;
                           }
                           a.push(c);
                       }
                   }
                   this.boxes = a, this.boxes.length || this.config.live || this.stop();
               }
           }
       }, {
           key: "offsetTop",
           value: function(a) {
               for (;void 0 === a.offsetTop; ) a = a.parentNode;
               for (var b = a.offsetTop; a.offsetParent; ) a = a.offsetParent, b += a.offsetTop;
               return b;
           }
       }, {
           key: "isVisible",
           value: function(a) {
               var b = a.getAttribute("data-wow-offset") || this.config.offset, c = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset, d = c + Math.min(this.element.clientHeight, k()) - b, e = this.offsetTop(a), f = e + a.clientHeight;
               return d >= e && f >= c;
           }
       }, {
           key: "disabled",
           value: function() {
               return !this.config.mobile && f(navigator.userAgent);
           }
       } ]), a;
   }();
   b["default"] = r, a.exports = b["default"];
});
</script>
<script>
   wow = new WOW(
     {
       animateClass: 'animated',
       offset:       0,
     }
   );
   wow.init();
 </script>
</body>
</html>